// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package persistence

import (
	"context"
	"pigeon2/internal/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newWorkFlow(db *gorm.DB, opts ...gen.DOOption) workFlow {
	_workFlow := workFlow{}

	_workFlow.workFlowDo.UseDB(db, opts...)
	_workFlow.workFlowDo.UseModel(&model.WorkFlow{})

	tableName := _workFlow.workFlowDo.TableName()
	_workFlow.ALL = field.NewAsterisk(tableName)
	_workFlow.ID = field.NewInt64(tableName, "id")
	_workFlow.Name = field.NewString(tableName, "name")
	_workFlow.Status = field.NewInt(tableName, "status")
	_workFlow.CreatedAt = field.NewTime(tableName, "created_at")
	_workFlow.UpdatedAt = field.NewTime(tableName, "updated_at")
	_workFlow.DeleteAt = field.NewField(tableName, "delete_at")

	_workFlow.fillFieldMap()

	return _workFlow
}

type workFlow struct {
	workFlowDo

	ALL       field.Asterisk
	ID        field.Int64
	Name      field.String
	Status    field.Int
	CreatedAt field.Time
	UpdatedAt field.Time
	DeleteAt  field.Field

	fieldMap map[string]field.Expr
}

func (w workFlow) Table(newTableName string) *workFlow {
	w.workFlowDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w workFlow) As(alias string) *workFlow {
	w.workFlowDo.DO = *(w.workFlowDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *workFlow) updateTableName(table string) *workFlow {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.Name = field.NewString(table, "name")
	w.Status = field.NewInt(table, "status")
	w.CreatedAt = field.NewTime(table, "created_at")
	w.UpdatedAt = field.NewTime(table, "updated_at")
	w.DeleteAt = field.NewField(table, "delete_at")

	w.fillFieldMap()

	return w
}

func (w *workFlow) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *workFlow) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 6)
	w.fieldMap["id"] = w.ID
	w.fieldMap["name"] = w.Name
	w.fieldMap["status"] = w.Status
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["delete_at"] = w.DeleteAt
}

func (w workFlow) clone(db *gorm.DB) workFlow {
	w.workFlowDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w workFlow) replaceDB(db *gorm.DB) workFlow {
	w.workFlowDo.ReplaceDB(db)
	return w
}

type workFlowDo struct{ gen.DO }

type IWorkFlowDo interface {
	gen.SubQuery
	Debug() IWorkFlowDo
	WithContext(ctx context.Context) IWorkFlowDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWorkFlowDo
	WriteDB() IWorkFlowDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWorkFlowDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWorkFlowDo
	Not(conds ...gen.Condition) IWorkFlowDo
	Or(conds ...gen.Condition) IWorkFlowDo
	Select(conds ...field.Expr) IWorkFlowDo
	Where(conds ...gen.Condition) IWorkFlowDo
	Order(conds ...field.Expr) IWorkFlowDo
	Distinct(cols ...field.Expr) IWorkFlowDo
	Omit(cols ...field.Expr) IWorkFlowDo
	Join(table schema.Tabler, on ...field.Expr) IWorkFlowDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWorkFlowDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWorkFlowDo
	Group(cols ...field.Expr) IWorkFlowDo
	Having(conds ...gen.Condition) IWorkFlowDo
	Limit(limit int) IWorkFlowDo
	Offset(offset int) IWorkFlowDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWorkFlowDo
	Unscoped() IWorkFlowDo
	Create(values ...*model.WorkFlow) error
	CreateInBatches(values []*model.WorkFlow, batchSize int) error
	Save(values ...*model.WorkFlow) error
	First() (*model.WorkFlow, error)
	Take() (*model.WorkFlow, error)
	Last() (*model.WorkFlow, error)
	Find() ([]*model.WorkFlow, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WorkFlow, err error)
	FindInBatches(result *[]*model.WorkFlow, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WorkFlow) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWorkFlowDo
	Assign(attrs ...field.AssignExpr) IWorkFlowDo
	Joins(fields ...field.RelationField) IWorkFlowDo
	Preload(fields ...field.RelationField) IWorkFlowDo
	FirstOrInit() (*model.WorkFlow, error)
	FirstOrCreate() (*model.WorkFlow, error)
	FindByPage(offset int, limit int) (result []*model.WorkFlow, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWorkFlowDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w workFlowDo) Debug() IWorkFlowDo {
	return w.withDO(w.DO.Debug())
}

func (w workFlowDo) WithContext(ctx context.Context) IWorkFlowDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w workFlowDo) ReadDB() IWorkFlowDo {
	return w.Clauses(dbresolver.Read)
}

func (w workFlowDo) WriteDB() IWorkFlowDo {
	return w.Clauses(dbresolver.Write)
}

func (w workFlowDo) Session(config *gorm.Session) IWorkFlowDo {
	return w.withDO(w.DO.Session(config))
}

func (w workFlowDo) Clauses(conds ...clause.Expression) IWorkFlowDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w workFlowDo) Returning(value interface{}, columns ...string) IWorkFlowDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w workFlowDo) Not(conds ...gen.Condition) IWorkFlowDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w workFlowDo) Or(conds ...gen.Condition) IWorkFlowDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w workFlowDo) Select(conds ...field.Expr) IWorkFlowDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w workFlowDo) Where(conds ...gen.Condition) IWorkFlowDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w workFlowDo) Order(conds ...field.Expr) IWorkFlowDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w workFlowDo) Distinct(cols ...field.Expr) IWorkFlowDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w workFlowDo) Omit(cols ...field.Expr) IWorkFlowDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w workFlowDo) Join(table schema.Tabler, on ...field.Expr) IWorkFlowDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w workFlowDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWorkFlowDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w workFlowDo) RightJoin(table schema.Tabler, on ...field.Expr) IWorkFlowDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w workFlowDo) Group(cols ...field.Expr) IWorkFlowDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w workFlowDo) Having(conds ...gen.Condition) IWorkFlowDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w workFlowDo) Limit(limit int) IWorkFlowDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w workFlowDo) Offset(offset int) IWorkFlowDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w workFlowDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWorkFlowDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w workFlowDo) Unscoped() IWorkFlowDo {
	return w.withDO(w.DO.Unscoped())
}

func (w workFlowDo) Create(values ...*model.WorkFlow) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w workFlowDo) CreateInBatches(values []*model.WorkFlow, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w workFlowDo) Save(values ...*model.WorkFlow) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w workFlowDo) First() (*model.WorkFlow, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkFlow), nil
	}
}

func (w workFlowDo) Take() (*model.WorkFlow, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkFlow), nil
	}
}

func (w workFlowDo) Last() (*model.WorkFlow, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkFlow), nil
	}
}

func (w workFlowDo) Find() ([]*model.WorkFlow, error) {
	result, err := w.DO.Find()
	return result.([]*model.WorkFlow), err
}

func (w workFlowDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WorkFlow, err error) {
	buf := make([]*model.WorkFlow, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w workFlowDo) FindInBatches(result *[]*model.WorkFlow, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w workFlowDo) Attrs(attrs ...field.AssignExpr) IWorkFlowDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w workFlowDo) Assign(attrs ...field.AssignExpr) IWorkFlowDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w workFlowDo) Joins(fields ...field.RelationField) IWorkFlowDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w workFlowDo) Preload(fields ...field.RelationField) IWorkFlowDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w workFlowDo) FirstOrInit() (*model.WorkFlow, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkFlow), nil
	}
}

func (w workFlowDo) FirstOrCreate() (*model.WorkFlow, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkFlow), nil
	}
}

func (w workFlowDo) FindByPage(offset int, limit int) (result []*model.WorkFlow, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w workFlowDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w workFlowDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w workFlowDo) Delete(models ...*model.WorkFlow) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *workFlowDo) withDO(do gen.Dao) *workFlowDo {
	w.DO = *do.(*gen.DO)
	return w
}
