// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package persistence

import (
	"context"
	"pigeon2/internal/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newWorkOrder(db *gorm.DB, opts ...gen.DOOption) workOrder {
	_workOrder := workOrder{}

	_workOrder.workOrderDo.UseDB(db, opts...)
	_workOrder.workOrderDo.UseModel(&model.WorkOrder{})

	tableName := _workOrder.workOrderDo.TableName()
	_workOrder.ALL = field.NewAsterisk(tableName)
	_workOrder.ID = field.NewInt64(tableName, "id")
	_workOrder.Creator = field.NewString(tableName, "creator")
	_workOrder.Name = field.NewString(tableName, "name")
	_workOrder.ApproveUser = field.NewString(tableName, "approve_user")
	_workOrder.WorkNodeID = field.NewInt64(tableName, "work_node_id")
	_workOrder.WorkFlowID = field.NewInt64(tableName, "work_flow_id")
	_workOrder.Status = field.NewInt(tableName, "status")
	_workOrder.CreatedAt = field.NewString(tableName, "created_at")
	_workOrder.UpdatedAt = field.NewString(tableName, "updated_at")
	_workOrder.DeleteAt = field.NewField(tableName, "delete_at")

	_workOrder.fillFieldMap()

	return _workOrder
}

type workOrder struct {
	workOrderDo

	ALL         field.Asterisk
	ID          field.Int64
	Creator     field.String
	Name        field.String
	ApproveUser field.String
	WorkNodeID  field.Int64
	WorkFlowID  field.Int64
	Status      field.Int
	CreatedAt   field.String
	UpdatedAt   field.String
	DeleteAt    field.Field

	fieldMap map[string]field.Expr
}

func (w workOrder) Table(newTableName string) *workOrder {
	w.workOrderDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w workOrder) As(alias string) *workOrder {
	w.workOrderDo.DO = *(w.workOrderDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *workOrder) updateTableName(table string) *workOrder {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.Creator = field.NewString(table, "creator")
	w.Name = field.NewString(table, "name")
	w.ApproveUser = field.NewString(table, "approve_user")
	w.WorkNodeID = field.NewInt64(table, "work_node_id")
	w.WorkFlowID = field.NewInt64(table, "work_flow_id")
	w.Status = field.NewInt(table, "status")
	w.CreatedAt = field.NewString(table, "created_at")
	w.UpdatedAt = field.NewString(table, "updated_at")
	w.DeleteAt = field.NewField(table, "delete_at")

	w.fillFieldMap()

	return w
}

func (w *workOrder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *workOrder) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 10)
	w.fieldMap["id"] = w.ID
	w.fieldMap["creator"] = w.Creator
	w.fieldMap["name"] = w.Name
	w.fieldMap["approve_user"] = w.ApproveUser
	w.fieldMap["work_node_id"] = w.WorkNodeID
	w.fieldMap["work_flow_id"] = w.WorkFlowID
	w.fieldMap["status"] = w.Status
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["delete_at"] = w.DeleteAt
}

func (w workOrder) clone(db *gorm.DB) workOrder {
	w.workOrderDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w workOrder) replaceDB(db *gorm.DB) workOrder {
	w.workOrderDo.ReplaceDB(db)
	return w
}

type workOrderDo struct{ gen.DO }

type IWorkOrderDo interface {
	gen.SubQuery
	Debug() IWorkOrderDo
	WithContext(ctx context.Context) IWorkOrderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWorkOrderDo
	WriteDB() IWorkOrderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWorkOrderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWorkOrderDo
	Not(conds ...gen.Condition) IWorkOrderDo
	Or(conds ...gen.Condition) IWorkOrderDo
	Select(conds ...field.Expr) IWorkOrderDo
	Where(conds ...gen.Condition) IWorkOrderDo
	Order(conds ...field.Expr) IWorkOrderDo
	Distinct(cols ...field.Expr) IWorkOrderDo
	Omit(cols ...field.Expr) IWorkOrderDo
	Join(table schema.Tabler, on ...field.Expr) IWorkOrderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWorkOrderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWorkOrderDo
	Group(cols ...field.Expr) IWorkOrderDo
	Having(conds ...gen.Condition) IWorkOrderDo
	Limit(limit int) IWorkOrderDo
	Offset(offset int) IWorkOrderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWorkOrderDo
	Unscoped() IWorkOrderDo
	Create(values ...*model.WorkOrder) error
	CreateInBatches(values []*model.WorkOrder, batchSize int) error
	Save(values ...*model.WorkOrder) error
	First() (*model.WorkOrder, error)
	Take() (*model.WorkOrder, error)
	Last() (*model.WorkOrder, error)
	Find() ([]*model.WorkOrder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WorkOrder, err error)
	FindInBatches(result *[]*model.WorkOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WorkOrder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWorkOrderDo
	Assign(attrs ...field.AssignExpr) IWorkOrderDo
	Joins(fields ...field.RelationField) IWorkOrderDo
	Preload(fields ...field.RelationField) IWorkOrderDo
	FirstOrInit() (*model.WorkOrder, error)
	FirstOrCreate() (*model.WorkOrder, error)
	FindByPage(offset int, limit int) (result []*model.WorkOrder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWorkOrderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w workOrderDo) Debug() IWorkOrderDo {
	return w.withDO(w.DO.Debug())
}

func (w workOrderDo) WithContext(ctx context.Context) IWorkOrderDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w workOrderDo) ReadDB() IWorkOrderDo {
	return w.Clauses(dbresolver.Read)
}

func (w workOrderDo) WriteDB() IWorkOrderDo {
	return w.Clauses(dbresolver.Write)
}

func (w workOrderDo) Session(config *gorm.Session) IWorkOrderDo {
	return w.withDO(w.DO.Session(config))
}

func (w workOrderDo) Clauses(conds ...clause.Expression) IWorkOrderDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w workOrderDo) Returning(value interface{}, columns ...string) IWorkOrderDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w workOrderDo) Not(conds ...gen.Condition) IWorkOrderDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w workOrderDo) Or(conds ...gen.Condition) IWorkOrderDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w workOrderDo) Select(conds ...field.Expr) IWorkOrderDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w workOrderDo) Where(conds ...gen.Condition) IWorkOrderDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w workOrderDo) Order(conds ...field.Expr) IWorkOrderDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w workOrderDo) Distinct(cols ...field.Expr) IWorkOrderDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w workOrderDo) Omit(cols ...field.Expr) IWorkOrderDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w workOrderDo) Join(table schema.Tabler, on ...field.Expr) IWorkOrderDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w workOrderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWorkOrderDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w workOrderDo) RightJoin(table schema.Tabler, on ...field.Expr) IWorkOrderDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w workOrderDo) Group(cols ...field.Expr) IWorkOrderDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w workOrderDo) Having(conds ...gen.Condition) IWorkOrderDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w workOrderDo) Limit(limit int) IWorkOrderDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w workOrderDo) Offset(offset int) IWorkOrderDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w workOrderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWorkOrderDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w workOrderDo) Unscoped() IWorkOrderDo {
	return w.withDO(w.DO.Unscoped())
}

func (w workOrderDo) Create(values ...*model.WorkOrder) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w workOrderDo) CreateInBatches(values []*model.WorkOrder, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w workOrderDo) Save(values ...*model.WorkOrder) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w workOrderDo) First() (*model.WorkOrder, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkOrder), nil
	}
}

func (w workOrderDo) Take() (*model.WorkOrder, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkOrder), nil
	}
}

func (w workOrderDo) Last() (*model.WorkOrder, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkOrder), nil
	}
}

func (w workOrderDo) Find() ([]*model.WorkOrder, error) {
	result, err := w.DO.Find()
	return result.([]*model.WorkOrder), err
}

func (w workOrderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WorkOrder, err error) {
	buf := make([]*model.WorkOrder, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w workOrderDo) FindInBatches(result *[]*model.WorkOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w workOrderDo) Attrs(attrs ...field.AssignExpr) IWorkOrderDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w workOrderDo) Assign(attrs ...field.AssignExpr) IWorkOrderDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w workOrderDo) Joins(fields ...field.RelationField) IWorkOrderDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w workOrderDo) Preload(fields ...field.RelationField) IWorkOrderDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w workOrderDo) FirstOrInit() (*model.WorkOrder, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkOrder), nil
	}
}

func (w workOrderDo) FirstOrCreate() (*model.WorkOrder, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkOrder), nil
	}
}

func (w workOrderDo) FindByPage(offset int, limit int) (result []*model.WorkOrder, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w workOrderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w workOrderDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w workOrderDo) Delete(models ...*model.WorkOrder) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *workOrderDo) withDO(do gen.Dao) *workOrderDo {
	w.DO = *do.(*gen.DO)
	return w
}
